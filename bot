import os
import discord
from discord import app_commands
from discord.ext import commands
from PIL import Image, ImageOps
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
BOT_TOKEN = os.getenv('DISCORD_BOT_TOKEN')

# Bot setup
intents = discord.Intents.default()
intents.guilds = True
intents.members = True
bot = commands.Bot(command_prefix="!", intents=intents)

# Path to the overlay image for watermarking
OVERLAY_IMAGE_PATH = "overlay.png"  # Ensure this image exists in the bot's directory

# Role IDs
EVENT_PING_ROLE_ID = 1242872145277747281
LEAK_PING_ROLE_ID = 1230629514468392960
EVENT_PING_PERMISSION_ROLE_ID = 1242172129664045146
LEAK_PING_PERMISSION_ROLE_ID = 1243877817561911406

@bot.event
async def on_ready():
    print("Ready")  # Prints when the bot is connected and ready
    # Set bot status
    await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name="over MT LEAGUE"))

# Use setup_hook to sync commands only once when the bot starts up
async def setup_hook():
    await bot.tree.sync()
    print("Commands synced with Discord.")

# Set the setup_hook
bot.setup_hook = setup_hook

# Command: ping
class PingSelect(discord.ui.Select):
    def __init__(self):
        options = [
            discord.SelectOption(label="Event", description="Ping the event role"),
            discord.SelectOption(label="Leak", description="Ping the leak role")
        ]
        super().__init__(placeholder="Select an option to ping", min_values=1, max_values=1, options=options)

    async def callback(self, interaction: discord.Interaction):
        member = interaction.user
        selected_option = self.values[0]

        # Check permissions based on the selected option
        if selected_option == "Event":
            if any(role.id == EVENT_PING_PERMISSION_ROLE_ID for role in member.roles):
                event_ping_role = interaction.guild.get_role(EVENT_PING_ROLE_ID)
                await interaction.response.send_message(f"{event_ping_role.mention}", allowed_mentions=discord.AllowedMentions(roles=True))
            else:
                await interaction.response.send_message("You don't have permission to ping the Event Ping role.", ephemeral=True)

        elif selected_option == "Leak":
            if any(role.id == LEAK_PING_PERMISSION_ROLE_ID for role in member.roles):
                leak_ping_role = interaction.guild.get_role(LEAK_PING_ROLE_ID)
                await interaction.response.send_message(f"{leak_ping_role.mention}", allowed_mentions=discord.AllowedMentions(roles=True))
            else:
                await interaction.response.send_message("You don't have permission to ping the Leak Ping role.", ephemeral=True)


class PingView(discord.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(PingSelect())

@bot.tree.command(name="ping", description="ping the event or leak role (considering you're a leaker/event team member)")
async def ping(interaction: discord.Interaction):
    await interaction.response.send_message("Choose a role to ping:", view=PingView(), ephemeral=True)

# Command: watermark
@bot.tree.command(name="watermark", description="overlay a watermark on an uploaded image")
@app_commands.describe(image="upload an image to apply the watermark")
async def watermark(interaction: discord.Interaction, image: discord.Attachment):
    if not image.content_type.startswith("image"):
        await interaction.response.send_message(embed=discord.Embed(
            title="Invalid Attachment", 
            description="The attachment is not an image.", 
            color=discord.Color.red()))
        return

    try:
        # Save and process the uploaded image in the local directory
        TEMP_IMAGE_DIR = "images"
        if not os.path.exists(TEMP_IMAGE_DIR):
            os.makedirs(TEMP_IMAGE_DIR)

        image_path = os.path.join(TEMP_IMAGE_DIR, image.filename)
        await image.save(image_path)

        # Open the base and overlay images
        base_image = Image.open(image_path)
        overlay_image = Image.open(OVERLAY_IMAGE_PATH).convert("RGBA")

        # Calculate the scale factor for even stretching
        base_width, base_height = base_image.size
        overlay_width, overlay_height = overlay_image.size

        # Uniform scaling factor for even stretching
        scale_factor = min(base_width / overlay_width, base_height / overlay_height)
        new_width = int(overlay_width * scale_factor)
        new_height = int(overlay_height * scale_factor)

        # Resize overlay to match the calculated dimensions
        overlay_image = overlay_image.resize((new_width, new_height), Image.Resampling.LANCZOS)

        # Center the overlay on the base image
        overlay_position = (
            (base_width - new_width) // 2,
            (base_height - new_height) // 2
        )
        combined_image = base_image.convert("RGBA")
        combined_image.paste(overlay_image, overlay_position, overlay_image)

        # Save the watermarked image
        output_path = os.path.join(TEMP_IMAGE_DIR, f"watermarked_{image.filename}")
        combined_image.save(output_path)

        await interaction.response.send_message(embed=discord.Embed(
            title="Watermark Applied", 
            description="Here is your image with the watermark applied!", 
            color=discord.Color.green()))
        await interaction.followup.send(file=discord.File(output_path))

        # Clean up the temporary files
        os.remove(image_path)
        os.remove(output_path)

    except Exception as e:
        await interaction.response.send_message(f"Failed to process the image: {str(e)}", ephemeral=True)

# Command: dm
@bot.tree.command(name="dm", description="send a direct message to a user with optional media")
@app_commands.describe(user="the user to send the message to", message="the message content", media="optional media attachment")
@app_commands.checks.has_permissions(manage_roles=True)
async def dm(interaction: discord.Interaction, user: discord.User, message: str = None, media: discord.Attachment = None):
    try:
        # Send message and/or media to the user
        if message and media:
            await user.send(content=message, file=await media.to_file())
        elif message:
            await user.send(content=message)
        elif media:
            await user.send(file=await media.to_file())
        else:
            await interaction.response.send_message("Please provide either a message or media to send.", ephemeral=True)
            return

        await interaction.response.send_message(f"Message sent to {user.mention}.", ephemeral=True)
    except discord.Forbidden:
        await interaction.response.send_message(f"Could not send a DM to {user.mention}. They may have DMs disabled.", ephemeral=True)

# Command: appres
@bot.tree.command(name="appres", description="send a response to a users team application")
@app_commands.describe(
    user="the user to send the response to",
    team="the team they are applying for event leaker or staff",
    status="the application status accepted or rejected",
    mod_note="optional note for the application"
)
@app_commands.choices(
    team=[
        app_commands.Choice(name="Event", value="Event"),
        app_commands.Choice(name="Leaker", value="Leaker"),
        app_commands.Choice(name="Staff", value="Staff"),
    ],
    status=[
        app_commands.Choice(name="Accepted", value="Accepted"),
        app_commands.Choice(name="Rejected", value="Rejected"),
    ]
)
@app_commands.checks.has_permissions(manage_roles=True)
async def appres(
    interaction: discord.Interaction,
    user: discord.User,
    team: app_commands.Choice[str],
    status: app_commands.Choice[str],
    mod_note: str = None
):
    # Create an embed for the DM
    embed = discord.Embed(
        title=f"{team.value} Team Application",
        color=discord.Color.green() if status.value == "Accepted" else discord.Color.red()
    )
    embed.description = (
        f"Your application for the **{team.value} Team** has been **{status.value.lower()}** by **{interaction.user.mention}**.\n\n"
        f"We appreciate your interest in joining the team and value the time you took to apply. "
        f"Should you have any questions about the decision, feel free to reach out.\n\n"
        f"{f'**Mod Note:** {mod_note}' if mod_note else ''}"
    )

    try:
        # Send the DM to the user
        await user.send(embed=embed)
        await interaction.response.send_message(
            f"Application response sent to {user.mention} for the {team.value} team application.", ephemeral=True
        )
    except discord.Forbidden:
        # Notify the moderator if the DM could not be sent
        await interaction.response.send_message(
            f"Could not send a DM to {user.mention}. They may have DMs disabled.", ephemeral=True
        )

# Run the bot
bot.run(BOT_TOKEN)
